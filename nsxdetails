#!/bin/bash
function endian(){
    v=$1
    i=${#v}
    while [ $i -gt 0 ]; do
        i=$[$i-2]
        echo -n ${v:$i:2}
    done
    echo
}

if [[ -e $1 ]] ; then
	# file exists, proceed
	echo "--- File $1 details: ---"
	filesize=$(wc -c < $1)
	filetype=$(xxd -p -l 8 $1 | xxd -r -p)
	if [[ $filesize -gt 1024*1024*1024 ]] ; then
		echo -e "\tFile is $(($filesize/1024/1024/1024)) GB"
	else
		echo -e "\tFile is $(($filesize/1024/1024)) MB"
	fi
	echo -e "\tFile type is $filetype"
    
	if [[ $filetype == "NEURALCD" ]] ; then
		filespec="$((16#$(xxd -p -l 1 -s 8 $1))).$((16#$(xxd -p -l 1 -s 9 $1)))"
		echo -e "\tFile spec is $filespec"
        # all of these are little-endian, so having to spin it around using the endian function below:
        year=$(endian $(xxd -p -l 2 -s 294 $1))
        month=$(endian $(xxd -p -l 2 -s 296 $1))
        day=$(endian $(xxd -p -l 2 -s 300 $1))
        hour=$(endian $(xxd -p -l 2 -s 302 $1))
        minute=$(endian $(xxd -p -l 2 -s 304 $1))
        second=$(endian $(xxd -p -l 2 -s 306 $1))
        printf -v year "%04d" $((16#$year))
        printf -v month "%02d" $((16#$month))
        printf -v day "%02d" $((16#$day))
        printf -v hour "%02d" $((16#$hour))
        printf -v minute "%02d" $((16#$minute))
        printf -v second "%02d" $((16#$second))
        
		dateformat=$(date -d "$year-$month-$day $hour:$minute:$second UTC")
		echo -e "\n\tFile start time (local time):\n\t\t$dateformat\n\t\t(stored as: $year-$month-$day $hour:$minute:$second UTC)"
		
		# not the clearest commands: (maybe split them into multi-liners for clarity?)
        # effectively, we xxd the requested number of bytes (-l) starting from -s,
        # then use endian to spin them around to little-endian, then convert from base 16 to decimal
		timeres=$((16#$(endian $(xxd -p -l 4 -s 290 $1))))
		period=$((16#$(endian $(xxd -p -l 4 -s 286 $1))))
		fs=$(($timeres/$period))
        chancount=$((16#$(endian $(xxd -p -l 4 -s 310 $1))))
        
		#could read chanlabels here
		
		extendedread=$((66*$chancount))     # the number of bytes in the extended header, which offsets data start
		datastart=$((8+306+$extendedread))  # where the actual data start in the file
		
        # in a paused file we end up with multiple segments, so must loop through:
		curpos=$datastart
		segment=0
		while [ $curpos -lt $filesize ]; do 
			test=$((16#$(xxd -p -l 1 -s $curpos $1)))
			if [[ $test != 1 ]]; then
				datapoints[segment]=$((($filesize-$datastart)/$chancount*2))
				echo -e "\t\t---dodgy data segment, estimating data length---"
				curpos=$filesize
			else
                dps=$((16#$(endian $(xxd -p -l 4 -s $(($curpos+5)) $1))))
				#echo -e "\t\tData segment $segment is $dps length and starts at $(($curpos+8))"
				datapoints[segment]=$dps
				skip=$(($dps*$chancount*2))
				curpos=$(($curpos+9+$skip))
			fi
			((segment++))
		done
		
		totdatapoints=$(("${datapoints[@]/%/+}0" | bc)) # clutzy.
		totseconds=$(($totdatapoints/$fs))
		dateendformat=$(date -d "$year-$month-$day $hour:$minute:$second UTC + $totseconds seconds")
		echo -e "\tFile end time (local time):\n\t\t$dateendformat"
		echo -e "\t\t(total file duration: $totseconds seconds)"
		
		echo -e "\n\t$chancount channels"
		echo -e "\t$fs Hz sampling frequency"
		
		echo -e "\n\t${#datapoints[@]} data segments:"
		for ((s=0;s<${#datapoints[@]};s++)); do
			echo -e "\t\tSegment $s: $((${datapoints[$s]}/$fs)) seconds"
		done
		echo -e "\n--- End $1 details ---"
    elif [[ $filetype == "NEURALSG" ]] ; then
        filespec=2.1
        timeres=30000
		period=$(xxd -p -l 4 -s 24 $1)
        period=$(endian $period)
		fs=$(($timeres/$period))
        
        chancount=$(xxd -p -l 4 -s 28 $1)
        chancount=$(endian $chancount)
        chancount=$((16#$chancount))
        
        datastart=$((8+16+4+4+4*$chancount))
        totdatapoints=$(($filesize-$datastart))
        totdatapoints=$(($totdatapoints/($chancount*2)))
        
        totseconds=$(($totdatapoints/$fs))
        
        echo -e "\tFile spec is $filespec"
		echo -e "\tTotal file duration: $totseconds seconds"
		
		echo -e "\n\t$chancount channels"
		echo -e "\t$fs Hz sampling frequency"

		echo -e "\n--- End $1 details ---"
    else
        echo "Unknown file type"
        exit 1
	fi
else
	echo "File does not exist"
	exit 1
fi