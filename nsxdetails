#!/bin/bash
if [[ -e $1 ]] ; then
	# file exists, proceed
	echo "--- File $1 details: ---"
	filesize=$(wc -c < $1)
	filetype=$(xxd -p -l 8 $1 | xxd -r -p)
	if [[ $filesize -gt 1024*1024*1024 ]] ; then
		echo -e "\tFile is $(($filesize/1024/1024/1024)) GB"
	else
		echo -e "\tFile is $(($filesize/1024/1024)) MB"
	fi
	echo -e "\tFile type is $filetype"
	if [[ $filetype == "NEURALCD" ]] ; then
		filespec="$((16#$(xxd -p -l 1 -s 8 $1))).$((16#$(xxd -p -l 1 -s 9 $1)))"
		echo -e "\tFile spec is $filespec"
		#little-endian mixed with wanting plaintext output is a pain with xxd: (use something else then?!)
		year="$(xxd -p -l 1 -s 295 -g 2 $1)$(xxd -p -l 1 -s 294 -g 2 $1)" 
		month="$(xxd -p -l 1 -s 297 -g 2 $1)$(xxd -p -l 1 -s 296 -g 2 $1)"
		day="$(xxd -p -l 1 -s 301 -g 2 $1)$(xxd -p -l 1 -s 300 -g 2 $1)"
		hour="$(xxd -p -l 1 -s 303 -g 2 $1)$(xxd -p -l 1 -s 302 -g 2 $1)"
		minute="$(xxd -p -l 1 -s 305 -g 2 $1)$(xxd -p -l 1 -s 304 -g 2 $1)"
		second="$(xxd -p -l 1 -s 307 -g 2 $1)$(xxd -p -l 1 -s 306 -g 2 $1)"
		printf -v year "%04d" $((16#$year))
		printf -v month "%02d" $((16#$month))
		printf -v day "%02d" $((16#$day))
		printf -v hour "%02d" $((16#$hour))
		printf -v minute "%02d" $((16#$minute))
		printf -v second "%02d" $((16#$second))
		dateformat=$(date -d "$year-$month-$day $hour:$minute:$second UTC")
		echo -e "\n\tFile start time (local time):\n\t\t$dateformat\n\t\t(stored as: $year-$month-$day $hour:$minute:$second UTC)"
		
		
		# yuck to all of these:
		timeres=""
		for s in {293..290..-1}; do
			timeres="$timeres$(xxd -p -l 1 -s $s $1)"
		done
		timeres=$((16#$timeres))
		
		fs=""
		for s in {289..286..-1}; do
			fs="$fs$(xxd -p -l 1 -s $s $1)"
		done
		fs=$((16#$fs))
		fs=$(($timeres/$fs))
		
		#echo "TimeRes was $timeres, Fs is $fs"
		
		chancount=""
		for s in {313..310..-1} ; do
			chancount="$chancount$(xxd -p -l 1 -s $s $1)"
		done
		chancount=$((16#$chancount))
		
		#chanlabels?
		
		extendedread=$((66*$chancount))
		#echo -e "\tread size: $extendedread"
		datastart=$((8+306+$extendedread))
		#echo -e "\tdata start: $datastart"
		
		curpos=$datastart
		segment=0
		while [ $curpos -lt $filesize ]; do
			test=$((16#$(xxd -p -l 1 -s $curpos $1)))
			if [[ $test != 1 ]]; then
				datapoints[segment]=$((($filesize-$datastart)/$chancount*2))
				echo -e "\t\t---dodgy data segment, estimating data length---"
				curpos=$filesize
			else
				dps=""
				for ((s=$(($curpos+8));s>$(($curpos+4));s--)); do
					dps="$dps$(xxd -p -l 1 -s $s $1)"
				done
				dps=$((16#$dps))
				#echo -e "\t\tData segment $segment is $dps length and starts at $(($curpos+8))"
				datapoints[segment]=$dps
				skip=$(($dps*$chancount*2))
				curpos=$(($curpos+9+$skip))
			fi
			((segment++))
		done
		
		totdatapoints=$(("${datapoints[@]/%/+}0" | bc)) # clutzy.
		totseconds=$(($totdatapoints/$fs))
		dateendformat=$(date -d "$year-$month-$day $hour:$minute:$second UTC + $totseconds seconds")
		echo -e "\tFile end time (local time):\n\t\t$dateendformat"
		echo -e "\t\t(total file duration: $totseconds seconds)"
		
		echo -e "\n\t$chancount channels"
		echo -e "\t$fs Hz sampling frequency"
		
		echo -e "\n\t${#datapoints[@]} data segments:"
		for ((s=0;s<${#datapoints[@]};s++)); do
			echo -e "\t\tSegment $s: $((${datapoints[$s]}/$fs)) seconds"
		done
		echo -e "\n--- End $1 details ---"
	else
		echo "Only NEURALCD files have been coded"
		exit 1
	fi
else
	echo "File does not exist"
	exit 1
fi
